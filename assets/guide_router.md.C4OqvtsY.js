import{l as a,c as s,b as t,a4 as n}from"./chunks/framework.Bsf8e199.js";const g=JSON.parse('{"title":"路由","description":"","frontmatter":{},"headers":[],"relativePath":"guide/router.md","filePath":"guide/router.md"}'),i={name:"guide/router.md"};function l(p,e,d,c,r,h){return t(),s("div",null,e[0]||(e[0]=[n(`<h1 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">​</a></h1><p>框架无需手动配置路由，而是基于文件系统自动生成路由，意味着开发者只需在 <code>/src/views/</code> 目录下创建文件，就会根据文件目录自动生成对应的路由，该能力由 <a href="https://github.com/posva/unplugin-vue-router" target="_blank" rel="noreferrer">unplugin-vue-router</a> 提供。</p><h2 id="配置规范" tabindex="-1">配置规范 <a class="header-anchor" href="#配置规范" aria-label="Permalink to &quot;配置规范&quot;">​</a></h2><p>如果对 <a href="https://github.com/posva/unplugin-vue-router" target="_blank" rel="noreferrer">unplugin-vue-router</a> 的规范还不了解，建议先阅读官方文档。框架在此基础上，预设了一些规范。以下面的目录结构为例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>目录结构                       路由地址                    路由 name</span></span>
<span class="line"><span></span></span>
<span class="line"><span>src/views/</span></span>
<span class="line"><span>├── _about</span></span>
<span class="line"><span>│   └── index.vue</span></span>
<span class="line"><span>├── example</span></span>
<span class="line"><span>│   ├── _test.vue</span></span>
<span class="line"><span>│   ├── components</span></span>
<span class="line"><span>│   │   └── dialog.vue</span></span>
<span class="line"><span>│   ├── svgicon.vue          /example/svgicon           /example/svgicon</span></span>
<span class="line"><span>│   └── index.vue            /example                   /example/</span></span>
<span class="line"><span>├── cart</span></span>
<span class="line"><span>│   ├── detail</span></span>
<span class="line"><span>│   │   └── [id].vue         /cart/detail/:id           /cart/detail/[id]</span></span>
<span class="line"><span>│   └── index.vue            /cart                      /cart/</span></span>
<span class="line"><span>├── news</span></span>
<span class="line"><span>│   ├── detail.[id].vue      /news/detail/:id           /news/detail.[id]</span></span>
<span class="line"><span>│   └── index.vue            /news                      /news/</span></span>
<span class="line"><span>├── [...all].vue             /:all(.*)                  /[...all]</span></span>
<span class="line"><span>├── index.vue                /                          /</span></span>
<span class="line"><span>└── login.vue                /login                     /login</span></span></code></pre></div><p>通过上面的示例，可以看出几个规范：</p><ul><li>文件夹或文件名开头为 <code>_</code> 的不会生成路由</li><li>所有 <code>components</code> 文件夹下的文件均不会生成路由</li><li><code>index.vue</code> 文件会生成一个空路由，例如 <code>/src/views/news/index.vue</code> -&gt; <code>/news</code> 路由</li><li>路由参数通过 <code>[ ]</code> 将参数名包裹，例如 <code>/src/views/user_[id].vue</code> -&gt; <code>/user_:id</code> 路由。设置可以添加多个参数 <code>/src/views/product_[skuId]_[seoDescription].vue</code></li><li>路由 name 默认为文件路径，也可通过 <code>definePage()</code> 在 <code>.vue</code> 文件内设置并覆盖</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>默认生成的路由可能为嵌套路由，但为了用一套 API 统一处理页面缓存，框架会将所有路由均处理成一级路由，并在 <code>App.vue</code> 里处理缓存逻辑。意味着如果同时创建 <code>/src/views/users/index.vue</code> 和 <code>/src/views/users.vue</code> 组件，<code>/src/views/users/index.vue</code> 不会在 <code>/src/views/users.vue</code> 的 <code>&lt;RouterView&gt;</code> 中呈现。</p><p>这也意味着 <code>/src/views/users/detail/[id].vue</code> 和 <code>/src/views/users/detail.[id].vue</code> 生成的路由和行为都是一样的，只有路由 name 有区别。</p><p>这与 <a href="https://github.com/posva/unplugin-vue-router" target="_blank" rel="noreferrer">unplugin-vue-router</a> 默认行为略有不同。</p></div><h2 id="definepage" tabindex="-1">definePage() <a class="header-anchor" href="#definepage" aria-label="Permalink to &quot;definePage()&quot;">​</a></h2><p>通过 <code>definePage()</code> 可以修改路由对象或添加路由元信息：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">definePage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;示例&#39;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">警告</p><p>不能在 <code>definePage()</code> 中使用变量，因为其传递的参数会在构建时提取并从 <code>&lt;script setup&gt;</code> 中删除。</p></div><h2 id="路由元信息" tabindex="-1">路由元信息 <a class="header-anchor" href="#路由元信息" aria-label="Permalink to &quot;路由元信息&quot;">​</a></h2><h3 id="title" tabindex="-1">title <a class="header-anchor" href="#title" aria-label="Permalink to &quot;title&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">string</td><td style="text-align:center;">/</td><td style="text-align:left;">浏览器及页面中展示的标题</td></tr></tbody></table><p>支持设置 i18n 对应的 key 值，详细可阅读《<a href="./i18n.html">国际化</a>》。</p><h3 id="cache" tabindex="-1">cache <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;cache&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">boolean / string / string[]</td><td style="text-align:center;">/</td><td style="text-align:left;">是否对该页面进行缓存</td></tr></tbody></table><ul><li><code>boolean</code> 设置为 true 时，该路由页面会被一直缓存</li><li><code>string</code> 设置某个目标路由的 name ，表示当前路由页面跳转到设置的 name 对应的路由页面时，则将当前路由页面进行缓存，否则不缓存</li><li><code>string[]</code> ，可设置一个目标路由的 name 数组</li></ul><p>当类型为 <code>string</code> 或 <code>string[]</code> 时，可以更精细的去控制页面缓存的逻辑。例如从列表页进入详情页，则需要将列表页进行缓存；而从列表页进入其它页面，则无需将列表页进行缓存。详细可阅读《<a href="./keep-alive.html">页面缓存</a>》。</p><h3 id="nocache" tabindex="-1">noCache <a class="header-anchor" href="#nocache" aria-label="Permalink to &quot;noCache&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">string / string[]</td><td style="text-align:center;">/</td><td style="text-align:left;">是否对该页面清除缓存，需设置 cache 才会生效</td></tr></tbody></table><ul><li><code>string</code> 设置某个目标路由的 name ，表示当前路由页面跳转到设置的 name 对应的路由页面时，则将当前路由页面清除缓存，否则不清除缓存</li><li><code>string[]</code> ，可设置一个目标路由的 name 数组</li></ul><p>该属性通常搭配 <code>cache: true</code> 使用，可以更精细的去控制页面取消缓存的逻辑。详细可阅读《<a href="./keep-alive.html">页面缓存</a>》。</p><h3 id="auth" tabindex="-1">auth <a class="header-anchor" href="#auth" aria-label="Permalink to &quot;auth&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">boolean / string / string[]</td><td style="text-align:center;">/</td><td style="text-align:left;">该路由访问权限</td></tr></tbody></table><ul><li><code>boolean</code> 设置为 <code>true</code> 时，该路由仅登录用户可访问</li><li><code>string</code> 设置某个权限的名称，表示当前路由仅允许具备该权限的用户可访问</li><li><code>string[]</code> 设置多个权限的名称数组，表示当前路由允许具备其中一个权限的用户可访问</li></ul><p>当类型为 <code>string</code> 或 <code>string[]</code> 时，可以更精细的去控制页面权限，不具备访问权限则会显示 403 页面，详细可阅读《<a href="./permission.html#路由权限">权限 - 路由权限</a>》。</p>`,28)]))}const u=a(i,[["render",l]]);export{g as __pageData,u as default};
