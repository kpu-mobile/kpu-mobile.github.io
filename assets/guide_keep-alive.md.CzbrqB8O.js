import{l as i,c as a,b as n,a4 as t}from"./chunks/framework.Bsf8e199.js";const E=JSON.parse('{"title":"页面缓存","description":"","frontmatter":{},"headers":[],"relativePath":"guide/keep-alive.md","filePath":"guide/keep-alive.md"}'),e={name:"guide/keep-alive.md"};function p(l,s,h,k,g,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="页面缓存" tabindex="-1">页面缓存 <a class="header-anchor" href="#页面缓存" aria-label="Permalink to &quot;页面缓存&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">注意</p><p>开启缓存必须保证每个页面组件必须设置 <code>name</code> ，并且确保 <code>name</code> 唯一。</p></div><p>我们只要在需要进行缓存的路由 meta 对象里配置 cache 参数即可。这个参数可接受以下 3 种类型：</p><ul><li><code>boolean</code></li><li><code>string</code></li><li><code>string[]</code></li></ul><p><code>boolean</code> 很好理解，当设置为 <code>true</code> 时，该页面只要一被访问，就会被缓存。例如有一个新闻管理的模块，我们把<strong>新闻列表页</strong>设置为 <code>cache: true</code> 后并访问，然后从<strong>新闻列表页</strong>点击某条记录进入<strong>新闻详情页</strong>，这时候再从<strong>新闻详情页</strong>返回<strong>新闻列表页</strong>时，<strong>新闻列表页</strong>上的数据是不会重新加载，而是保留了当时离开时的状态。</p><p>但这个方案也有一个弊端，就是该页面一旦访问就永久被缓存住了（除非手动进行浏览器刷新），如果用户从<strong>新闻列表页</strong>进入的不是<strong>新闻详情页</strong>，而是其它模块的页面，比如上一级页面，这时候其实是不希望<strong>新闻列表页</strong>被缓存的。这种情况下，框架支持设置 <code>string</code> 和 <code>string[]</code> 两个类型的参数值。</p><p>首先不管设置 <code>string</code> 还是 <code>string[]</code> ，你需要设置的值，都是路由的 name 。</p><p>怎么理解呢？还是用上面的例子，如果有两个模块，一个新闻管理，一个用户管理。当从<strong>新闻列表页</strong>进入<strong>新闻详情页</strong>的时候，需要对<strong>新闻列表页</strong>进行缓存，而从<strong>新闻列表页</strong>进入<strong>用户列表页</strong>，则不需要对<strong>新闻列表页</strong>进行缓存，我们就可以对<strong>新闻列表页</strong>的路由设置成：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/views/</span></span>
<span class="line"><span>└── news/</span></span>
<span class="line"><span>    ├── [id].vue</span></span>
<span class="line"><span>    └── index.vue</span></span></code></pre></div><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- /src/views/news/index.vue --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">definePage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;新闻列表页&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cache: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/news/[id]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>这表示从<strong>新闻列表页</strong>进入<strong>新闻详情页</strong>时，<strong>新闻列表页</strong>才会被缓存，进入其它任何页面都不会缓存。</p><p>当然也可将 <code>cache</code> 设置成 name 数组。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/views/</span></span>
<span class="line"><span>└── news/</span></span>
<span class="line"><span>    ├── create.vue</span></span>
<span class="line"><span>    ├── detail.[id].vue</span></span>
<span class="line"><span>    └── index.vue</span></span></code></pre></div><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- /src/views/news/index.vue --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">definePage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;新闻列表页&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cache: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/news/detail.[id]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/news/create&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>这样就表示从<strong>新闻列表页</strong>进入<strong>新闻详情页</strong>或<strong>新增新闻页</strong>时，<strong>新闻列表页</strong>才会被缓存，进入其它任何页面都不会缓存。</p><hr><p>还有一种场景，就是某个页面始终开启缓存，仅在某些特定条件下才关闭缓存。例如有一个新闻管理的模块，我们希望<strong>新增新闻页</strong>始终开启缓存，因为在进行新增操作时，可能需要跳转到新闻分类管理的页面进行新增分类的操作，或者是其他页面进行一些操作，当返回<strong>新增新闻页</strong>时，需要将它缓存。一旦新闻新增成功，返回到<strong>新闻列表页</strong>时，<strong>新增新闻页</strong>就不再需要缓存了。</p><p>我们只要在需要进行缓存的路由 meta 对象里配置 noCache 参数即可。这个参数可接受以下 2 种类型：</p><ul><li><code>string</code></li><li><code>string[]</code></li></ul><p>针对上述场景，我们就可以对<strong>新增新闻页</strong>的路由设置成：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/views/</span></span>
<span class="line"><span>└── news/</span></span>
<span class="line"><span>    ├── create.vue</span></span>
<span class="line"><span>    └── index.vue</span></span></code></pre></div><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- /src/views/news/create.vue --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">definePage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;新增新闻页&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cache: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    noCache: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/news/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,22)]))}const o=i(e,[["render",p]]);export{E as __pageData,o as default};
